git init - инициализация папки
git status - проверка статуса
git add <file.txt> добавление файла в проект
git rm --cached <file.txt> - отменяет предыдущую команду (добавление файла в проект)
git commit -m "added commit" - создаём коммит
git log - история коммитов 
git config user.name artur - меняем имя пользователя создающего коммиты
git config user.email - меняем email юзера
git blame <file.txt> - узнаём кто сделал коммит
git clone <url> - создаём клон
git show 9d947s4k - показывает изменения указанного коммита
git rm uslesssfile.txt - удаляем файл из системы и из коммита (уточнить?)
git rm cached local-settings.txt - убирает файл из коммита
git fetch - достаёт коммит, но не мерджит автоматически
git pull - достаёт коммит, но и мерджит автоматически
git fetch origin --prune - посмотреть что удалилось на git
git config --global alias.logg log --pretty... - создаём алиас (logg- имя алиаса, log --pretty... - команда)
git checkout --file.txt - !Worning(диструктивная команда) затирает локальные изменения;

<<<<<<<<<<<<<<-----add new project in your github------->>>>>>>>>>>>>>>>
1) create remove project on git
git init / git add. / git commit -m 'first commit' / git remote add origin https://github.com/you_repository/you_project
git push -u origin master
<<<<<<<<<<<<<<------------>>>>>>>>>>>>>>>>
cd ./ - переход по папкам;
ls - выводит содержимое текущей папки;
cat <file.txt> - выводит содержимое файла;

<<<<<<<<<<<<<<-----branch------->>>>>>>>>>>>>>>>
git branch <user> - создать ветку user
git checkout master - перейти на ветку master
git branch - посмотреть ветки (-a -all, -a -vv - все ветки и удаленные и локальние)
git checkout -b <hotfix> - создаём и сразу переходим на ветку hotfix
git push -u origin <new_branch> - запушить локальную ветру на удалённый репозиторий ( <-u> - с провами хозяина)
git branch -d <v2> - удаление локальной ветки
git push origin --delete <v2> - удаление ветки на сервере (при необходимости можно востановить)
git fetch origin --prune - если на сервере какую-то ветку удалили и мы хотим увидить эту синхронизацию у себя (но в нашей локации эта ветка может остаться, и чтобы мы удалили её локально нужно сделать команду которую описал на 2 комманды выше)
git reflog - !показывает гда был HEAD до этого (для того чтобы отследить, с целью востановить, даже удаленные ветки и коммиты)
git checkout -b <user> 9d34b2q - восстановить удалённую ветку (git push -u origin <user> - ветка снова на месте)
//после можно использовать  git checkout -b v2, git push -u origin v2 - всё, ветка вернулась на сервер
// когда на сервере(в проекте) кто-то создал новую ветку, а мы сделали очередной pull - мы стянули эту ветку себе, но git нам её показывать не будет(пока мы его не попросим)

// HEAD - текущее состояние системы, то на каком коммите HEAD находтся;
git reset HEAD --<file.txt> -(тоже диструктивная команда, но не такая дистр. как checkout) переносит HEAD;
// мы в безопасности когда сделали коммит!)
git show <1ed3as5> - покажет изменения этого коммита
git log --pretty=oneline - (git log), но в виде списка коммитов
git log --pretty=oneline - аналогично предыдущему + он короче (7символов в названии коммита)
git log --pretty=oneline -5 --graph - красивенный график коммитов ми-ми-ми;)
git log --pretty=format: '%h	(%h - хеш коммита, %s - месседж коммита, <%an> - имя того кто делал коммит
git log --pretty=format: "%Cred%h%Creset %C(bold blue)<%an>%Creset"%C(#a06a98)%d%C(reser) - график как у Ю.Б.
git config --global alias.logg "log --pretty=oneline --abbrev-commit -5 --graph" - создалл таким образом alias с названием logg для удобства
git config --get-regexp alias - список всех alias-ов

git checkout commit 4v21a8r - перейти к данному коммиту
git stash - вернуться к нынешнему коммиту не внося никаких изменений
git reset --hard <tag/branch/commit id> - откатит вас (переместит HEAD) на указанный коммит (W! диструктивная команда)
//удаление коммита с серевера:
1)git reset --hard <commit>
2)git push --force


// --------------------------------------- Git advanced ------------------------- //

$git stash - очистить директорию от лишних неотслеживаемых изменений 

__избавиться от ненужных (untracked files)
1)git add .
2)git reset --hardd origin/branch

__if your merge with problem work in vim
1) press "i" 2) write your merge message 3) press "esc" 4) write ":wq" 5) then press enter

git reset --soft HEAD~1 вернуть хед на состояние до совершения запушенного коммита с целью перезаписать его (git push -f);

__pull with uncommitted changes
$git stash $git merge origin/master $git stash pop

$git cherry-pik k2jgj33l   - черепикнуть чужой коммит к себе (ну и git push не забыть) коммит;)

__REBASE - how to do
$git pull origin release_mobile_18.1 (pull dev in needed branch) --rebase $git add . $git rebase --continue $git push -f

git rebase master - ты синхронизируешься с главной веткой в которую коммитят все разработчики проекта, это полезно когда кто-то изменил участок кода с которым ты сейчас работаешь в своей ветке, дабы через неделю ты смог без проблем смержиться с master веткой. Обычно делается каждое утро перед началом рабочего дня и в конце когда фича готова.
git merge - обычно используется когда у вас 2 и более master ветки (к примеру master и prototype) в этих ветках очень много комитов (и rebase здесь не подходит) и обчно через пару недель, maintainer репозитория наработки из prototype ветки "сливает" в master ветку по средствам этого самого git merge

 --> схлопнуть несколько коммитов в один
git rebase -i HEAD~5 "5" - кол-во заребейзнутых) коммитов
  дальше откроется vim в котором нужно будет выбрать что делать с ребейзом ('r' and 's') и не забудь удалить слово 'pick';)
  после, будет предлагать переименовать коммит (можно всё зокоментировать #)
  после успешной работы в vim делаем git push -f 
  
